.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Gearman::XS::Worker 3"
.TH Gearman::XS::Worker 3 "2013-04-20" "perl v5.14.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Gearman::XS::Worker \- Perl worker for gearman using libgearman
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Gearman::XS qw(:constants);
\&  use Gearman::XS::Worker;
\&
\&  $worker = new Gearman::XS::Worker;
\&
\&  $ret = $worker\->add_server($host, $port);
\&  if ($ret != GEARMAN_SUCCESS)
\&  {
\&    printf(STDERR "%s\en", $worker\->error());
\&    exit(1);
\&  }
\&
\&  $ret = $worker\->add_function("reverse", 0, \e&reverse, $options);
\&  if ($ret != GEARMAN_SUCCESS)
\&  {
\&    printf(STDERR "%s\en", $worker\->error());
\&  }
\&
\&  while (1)
\&  {
\&    my $ret = $worker\->work();
\&    if ($ret != GEARMAN_SUCCESS)
\&    {
\&      printf(STDERR "%s\en", $worker\->error());
\&    }
\&  }
\&
\&  sub reverse {
\&    $job = shift;
\&
\&    $workload = $job\->workload();
\&    $result   = reverse($workload);
\&
\&    printf("Job=%s Function_Name=%s Workload=%s Result=%s\en",
\&            $job\->handle(), $job\->function_name(), $job\->workload(), $result);
\&
\&    return $result;
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Gearman::XS::Worker is a worker class for the Gearman distributed job system
using libgearman.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.SS "Gearman::XS::Worker\->\fInew()\fP"
.IX Subsection "Gearman::XS::Worker->new()"
Returns a Gearman::XS::Worker object.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "$worker\->add_server($host, $port)"
.el .SS "\f(CW$worker\fP\->add_server($host, \f(CW$port\fP)"
.IX Subsection "$worker->add_server($host, $port)"
Add a job server to a worker. This goes into a list of servers than can be
used to run tasks. No socket I/O happens here, it is just added to a list.
Returns a standard gearman return value.
.ie n .SS "$worker\->add_servers($servers)"
.el .SS "\f(CW$worker\fP\->add_servers($servers)"
.IX Subsection "$worker->add_servers($servers)"
Add a list of job servers to a worker. The format for the server list is:
SERVER[:PORT][,SERVER[:PORT]]... No socket I/O happens here, it is just added
to a list. Returns a standard gearman return value.
.ie n .SS "$worker\->\fIremove_servers()\fP"
.el .SS "\f(CW$worker\fP\->\fIremove_servers()\fP"
.IX Subsection "$worker->remove_servers()"
Remove all servers currently associated with the worker.
.ie n .SS "$worker\->echo($data)"
.el .SS "\f(CW$worker\fP\->echo($data)"
.IX Subsection "$worker->echo($data)"
Send data to all job servers to see if they echo it back. This is a test
function to see if job servers are responding properly.
Returns a standard gearman return value.
.ie n .SS "$worker\->add_function($function_name, $timeout, $function, $function_args)"
.el .SS "\f(CW$worker\fP\->add_function($function_name, \f(CW$timeout\fP, \f(CW$function\fP, \f(CW$function_args\fP)"
.IX Subsection "$worker->add_function($function_name, $timeout, $function, $function_args)"
Register and add callback function for worker. Returns a standard gearman
return value.
.ie n .SS "$worker\->\fIwork()\fP"
.el .SS "\f(CW$worker\fP\->\fIwork()\fP"
.IX Subsection "$worker->work()"
Wait for a job and call the appropriate callback function when it gets one.
Returns a standard gearman return value.
.ie n .SS "$worker\->\fIgrab_job()\fP"
.el .SS "\f(CW$worker\fP\->\fIgrab_job()\fP"
.IX Subsection "$worker->grab_job()"
Get a job from one of the job servers. Returns a standard gearman return value.
.ie n .SS "$worker\->\fIerror()\fP"
.el .SS "\f(CW$worker\fP\->\fIerror()\fP"
.IX Subsection "$worker->error()"
Return an error string for the last error encountered.
.ie n .SS "$worker\->\fIoptions()\fP"
.el .SS "\f(CW$worker\fP\->\fIoptions()\fP"
.IX Subsection "$worker->options()"
Get options for a worker.
.ie n .SS "$worker\->set_options($options)"
.el .SS "\f(CW$worker\fP\->set_options($options)"
.IX Subsection "$worker->set_options($options)"
Set options for a worker.
.ie n .SS "$worker\->add_options($options)"
.el .SS "\f(CW$worker\fP\->add_options($options)"
.IX Subsection "$worker->add_options($options)"
Add options for a worker.
.ie n .SS "$worker\->remove_options($options)"
.el .SS "\f(CW$worker\fP\->remove_options($options)"
.IX Subsection "$worker->remove_options($options)"
Remove options for a worker.
.ie n .SS "$worker\->\fItimeout()\fP"
.el .SS "\f(CW$worker\fP\->\fItimeout()\fP"
.IX Subsection "$worker->timeout()"
Get current socket I/O activity timeout value. Returns Timeout in milliseconds
to wait for I/O activity.
.ie n .SS "$worker\->set_timeout($timeout)"
.el .SS "\f(CW$worker\fP\->set_timeout($timeout)"
.IX Subsection "$worker->set_timeout($timeout)"
Set socket I/O activity timeout for connections in milliseconds.
.ie n .SS "$worker\->register($function_name, $timeout)"
.el .SS "\f(CW$worker\fP\->register($function_name, \f(CW$timeout\fP)"
.IX Subsection "$worker->register($function_name, $timeout)"
Register function with job servers with an optional timeout. The timeout
specifies how many seconds the server will wait before marking a job as failed.
Returns a standard gearman return value.
.ie n .SS "$worker\->unregister($function_name)"
.el .SS "\f(CW$worker\fP\->unregister($function_name)"
.IX Subsection "$worker->unregister($function_name)"
Unregister function with job servers. Returns a standard gearman return value.
.ie n .SS "$worker\->\fIunregister_all()\fP"
.el .SS "\f(CW$worker\fP\->\fIunregister_all()\fP"
.IX Subsection "$worker->unregister_all()"
Unregister all functions with job servers. Returns a standard gearman return
value.
.ie n .SS "$worker\->function_exist($function_name)"
.el .SS "\f(CW$worker\fP\->function_exist($function_name)"
.IX Subsection "$worker->function_exist($function_name)"
See if a function exists in the server. Returns 1 if the function exists,
empty string if not.
.ie n .SS "$worker\->\fIwait()\fP"
.el .SS "\f(CW$worker\fP\->\fIwait()\fP"
.IX Subsection "$worker->wait()"
When in non-blocking I/O mode, wait for activity from one of the servers.
.ie n .SS "$worker\->set_log_fn($function, $verbose)"
.el .SS "\f(CW$worker\fP\->set_log_fn($function, \f(CW$verbose\fP)"
.IX Subsection "$worker->set_log_fn($function, $verbose)"
Set logging function.
.SH "BUGS"
.IX Header "BUGS"
Any in libgearman plus many others of my own.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2009\-2010 Dennis Schoen
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.9 or,
at your option, any later version of Perl 5 you may have available.
.SH "WARRANTY"
.IX Header "WARRANTY"
This is free software. \s-1IT\s0 \s-1COMES\s0 \s-1WITHOUT\s0 \s-1WARRANTY\s0 \s-1OF\s0 \s-1ANY\s0 \s-1KIND\s0.
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dennis Schoen <dennis@blogma.de>
